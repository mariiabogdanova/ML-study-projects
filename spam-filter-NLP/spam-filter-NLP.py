# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13P7X-B7r5Ercw9I-YkWE0khRoPFIzOiD
"""

import numpy as np
import pandas as pd
import nltk
from nltk.corpus import stopwords
import string
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
#Following these tutorials https://becominghuman.ai/10-machine-learning-projects-to-boost-your-portfolio-88d17e2825b3

# Exploring the data
df = pd.read_csv("emails.csv")
print(df.head())
print(df.shape)
print(df.columns)

df.drop_duplicates(inplace=True)
print(df.shape)

# Checking if data loaded correctly
def basic_details(df):
    b = pd.DataFrame()
    b['Missing values'] = df.isnull().sum()
    b['N unique values'] = df.nunique()
    b['dtype'] = df.dtypes
    return b
print(basic_details(df))

# Downloading the stopwords package - useless words
nltk.download("stopwords")

# Function to clean the text - remove the punctuation and stopwords - and return the tokens
def process(text):
    nopunc = [char for char in text if char not in string.punctuation]
    nopunc = ''.join(nopunc)
    clean = [word for word in nopunc.split() if word.lower() not in stopwords.words('english')]
    return clean

df['text'].head().apply(process)

# Converting the text into a matrix of token counts 
message = CountVectorizer(analyzer=process).fit_transform(df['text'])

# Splitting the data into 80% training and 20% testing
X_train, X_test, y_train, y_test = train_test_split(message, df['spam'], test_size=0.20, random_state=0)
print(message.shape)

# Creating and train the Naive Bayes Classifier
# Answering the classification question: is question A spam given that it contains words from set B
NBclassifier = MultinomialNB().fit(X_train, y_train)

# Evaluating the model on the training data set
y_pred = NBclassifier.predict(X_train)
print(classification_report(y_train, pred))
print("Confusion Matrix: \n", confusion_matrix(y_train, y_pred))
print("Accuracy: \n", accuracy_score(y_train, y_pred))

# Evaluating the model on the validation data set
y_test_pred = NBclassifier.predict(X_test)
print(classification_report(y_test, y_test_pred))
print("Confusion Matrix: \n", confusion_matrix(y_test, y_test_pred))
print("Accuracy: \n", accuracy_score(y_test, y_test_pred))

